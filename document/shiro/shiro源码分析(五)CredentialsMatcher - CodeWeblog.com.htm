<!DOCTYPE html>
<!-- saved from url=(0097)http://www.codeweblog.com/shiro%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BA%94-credentialsmatcher/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/v4.js" charset="utf-8" id="UYScript"></script><script src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/saved_resource" charset="utf-8" id="uyan_script"></script><script src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/id.php" charset="utf-8"></script>

<meta http-equiv="X-UA-Compatible" content="IE=9; IE=8; IE=7; IE=EDGE">

<title>shiro源码分析(五)CredentialsMatcher - CodeWeblog.com</title>

    <meta name="keywords" content="Shiro, CredentialsMatcher, credentials matcher, simplehash如何加密, shiro 默认 matcher, doCredentialsMatch, HashedCredentialsMatcher 源码, shiro 源码解析, setCredentialsMatcher, did not match the expected credentials., shiro credentialsMatcher, hashcredentialsmatcher如何获取salt, credentialmatcher, AuthenticatingRealm credentialsMatcher, shiro源码解析, shiro注入HashedCredentialsMatcher, HashedCredentialsMatcher, PasswordMatcher, the expected credentials, shiro1.2.4源码, assertCredentialsMatch, shiro Credential, shiro 源码分析, SimpleByteSource, shiro 源码, shiro源码, SHIRO credentials">
    <meta name="description" content="shiro源码分析(五)CredentialsMatcher Realm在验证用户身份的时候,要进行密码匹配.最简单的情况就是明文直接匹配,然后就是加密匹配,这里的匹配工作则就是交给CredentialsMatcher来完成的.先看下它的接口方法: public interface CredentialsMatcher { boolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo info); } 根据用户名获取AuthenticationInfo ,然后就需要将用户提">
  


<link rel="shortcut icon" href="http://www.codeweblog.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/style.css" media="all">
<link rel="stylesheet" href="http://www.codeweblog.com/static/tomorrow-night.min.css">
<script type="text/javascript" async="" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/kctm"></script><script src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/hm.js"></script><script src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/highlight.min.js"></script>
<script>
window.onload = function() {
    var aCodes = document.getElementsByTagName('pre');
    for (var i=0; i < aCodes.length; i++) {
        hljs.highlightBlock(aCodes[i]);
    }
};
</script>

<script>
function google_search() {
    var q = document.getElementById("keyword");
    if (q.value != "") {
        var url = 'http://www.google.com/search?q=site:codeweblog.com%20' + q.value;
        if (navigator.userAgent.indexOf('iPad') > -1 || navigator.userAgent.indexOf('iPhone') > -1 || navigator.userAgent.indexOf('iPhone') > -1) {
            location.href = url;
        } else {
            window.open(url, "_blank");
        }
        return false;
    } else {
        return false;
    }
}
function baidu_search() {
    var q = document.getElementById("keyword");
    if (q.value != "") {
        var url = 'http://www.baidu.com/baidu?wd=site:codeweblog.com%20' + q.value;
        if (navigator.userAgent.indexOf('iPad') > -1 || navigator.userAgent.indexOf('iPhone') > -1 || navigator.userAgent.indexOf('iPhone') > -1) {
            location.href = url;
        } else {
            window.open(url, "_blank");
        }
        return false;
    } else {
        return false;
    }
}
</script>

<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?7f1f422d2b6795566599d2289fe7a29a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>


<script src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/share.js"></script><link rel="stylesheet" href="http://bdimg.share.baidu.com/static/api/css/share_style0_24.css"></head>
<body><div id="BAIDU_DUP_fp_wrapper" style="position: absolute; left: -1px; bottom: -1px; z-index: 0; width: 0px; height: 0px; overflow: hidden; visibility: hidden; display: none;"><iframe id="BAIDU_DUP_fp_iframe" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/o.htm" style="width: 0px; height: 0px; visibility: hidden; display: none;"></iframe></div>

<div id="hd"> <!-- 导航区域 -->
  <div id="nav">
    <a href="http://www.codeweblog.com/" title="CodeWeblog.com" class="logo"><img src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/logo.png" alt="CodeWeblog.com" height="29" width="118"></a> <!-- 主导航 --><!-- an End -->
    


    <ul class="nav_list">
      <li><a title="开源" class="nav-item" href="http://www.codeweblog.com/category/%e5%bc%80%e6%ba%90/">开源</a></li>
      <li><a title="编程" class="nav-item" href="http://www.codeweblog.com/category/%e7%bc%96%e7%a8%8b/">编程</a></li>
      <li><a title="资讯" class="nav-item" href="http://www.codeweblog.com/category/%e8%b5%84%e8%ae%af/">资讯</a></li>
      <li><a title="职业" class="nav-item" href="http://www.codeweblog.com/category/%e8%81%8c%e4%b8%9a/">职业</a></li>
      <li><a title="产品" class="nav-item" href="http://www.codeweblog.com/category/%e4%ba%a7%e5%93%81/">产品</a></li>
      <li><a title="互联网" class="nav-item" href="http://www.codeweblog.com/category/%e4%ba%92%e8%81%94%e7%bd%91/">互联网</a></li>
      <li><a title="管理" class="nav-item" href="http://www.codeweblog.com/category/%e7%ae%a1%e7%90%86/">管理</a></li>
    </ul>
    
    
    <div class="tb-nav">
      <div class="tb-item"> <!-- 搜索 -->
        <div style="background: none repeat scroll 0% 0% transparent;" class="sc">
          <form method="post" id="searchform" action="http://www.codeweblog.com/search/">
            <input id="keyword" class="focus" size="24" name="keyword" accesskey="s" autosave="baidu" results="8" autocomplete="off">
            <button type="submit" name="sa">搜索</button>
          </form>          
        </div>
      </div>
    </div><!-- tb-nav End -->    

  </div>
</div>


<div style="text-align:center;padding: 10px 0 0 0;">
<script type="text/javascript">
    /*960*60*/
    var cpro_id = "u2109374";
</script>
<script src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/c.js" type="text/javascript"></script><div id="BAIDU_SSP__wrapper_u2109374_0"><iframe id="iframeu2109374_0" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/kctm.htm" width="960" height="60" align="center,center" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" style="border:0; vertical-align:bottom;margin:0;" allowtransparency="true"></iframe></div>
</div>



<div id="con">
  <div id="wrapper">

<div class="content fl">
  <div class="current_nav">
    <a href="http://www.codeweblog.com/">首页</a> <span class="sub">&gt;</span>
    <a href="http://www.codeweblog.com/category/shiro%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90/" title="shiro源码分析">shiro源码分析</a> <span class="sub">&gt;</span>
    <a href="http://www.codeweblog.com/shiro%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90-%e4%ba%94-credentialsmatcher/">shiro源码分析(五)CredentialsMatcher</a>
  </div>
  
  <div style="text-align: center; padding: 10px 0;">
<script type="text/javascript">
    /*500*200标签云*/
    var cpro_id = "u2109379";
</script>
<script type="text/javascript" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/c.js"></script><div id="BAIDU_SSP__wrapper_u2109379_0"><iframe id="iframeu2109379_0" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/kctm(1).htm" width="500" height="200" align="center,center" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" style="border:0; vertical-align:bottom;margin:0;" allowtransparency="true"></iframe></div>
</div>


  <div class="post_title">
    <h1>shiro源码分析(五)CredentialsMatcher</h1>
  </div>

  
<div style="text-align: center; padding: 10px 0;">
<script type="text/javascript">
    /*640*60链接*/
    var cpro_id = "u2118662";
</script>
<script src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/c.js" type="text/javascript"></script><div id="BAIDU_SSP__wrapper_u2118662_0"><iframe id="iframeu2118662_0" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/kctm(2).htm" width="640" height="60" align="center,center" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" style="border:0; vertical-align:bottom;margin:0;" allowtransparency="true"></iframe></div>
</div>



  
  <div class="post_content" id="paragraph">
    <p>Realm在验证用户身份的时候，要进行密码匹配。最简单的情况就是明文直接匹配，然后就是加密匹配，这里的匹配工作则就是交给CredentialsMatcher来完成的。先看下它的接口方法：</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CredentialsMatcher</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">doCredentialsMatch</span><span class="hljs-params">(AuthenticationToken token, AuthenticationInfo info)</span></span>;
}
</pre>
<p>根据用户名获取AuthenticationInfo ，然后就需要将用户提交的AuthenticationToken和AuthenticationInfo 进行匹配。<br>
AuthenticatingRealm从第三篇文章知道是用来进行认证流程的，它有一个属性CredentialsMatcher credentialsMatcher，使用如下：</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> AuthenticationInfo <span class="hljs-title">getAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>{

        AuthenticationInfo info = getCachedAuthenticationInfo(token);
        <span class="hljs-keyword">if</span> (info == <span class="hljs-keyword">null</span>) {
            <span class="hljs-comment">//otherwise not cached, perform the lookup:</span>
            info = doGetAuthenticationInfo(token);
            log.debug(<span class="hljs-string">"Looked up AuthenticationInfo [{}] from doGetAuthenticationInfo"</span>, info);
            <span class="hljs-keyword">if</span> (token != <span class="hljs-keyword">null</span> &amp;&amp; info != <span class="hljs-keyword">null</span>) {
                cacheAuthenticationInfoIfPossible(token, info);
            }
        } <span class="hljs-keyword">else</span> {
            log.debug(<span class="hljs-string">"Using cached authentication info [{}] to perform credentials matching."</span>, info);
        }

        <span class="hljs-keyword">if</span> (info != <span class="hljs-keyword">null</span>) {
            <span class="hljs-comment">//在这里进行认证密码匹配</span>
            assertCredentialsMatch(token, info);
        } <span class="hljs-keyword">else</span> {
            log.debug(<span class="hljs-string">"No AuthenticationInfo found for submitted AuthenticationToken [{}].  Returning null."</span>, token);
        }

        <span class="hljs-keyword">return</span> info;
    }
<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assertCredentialsMatch</span><span class="hljs-params">(AuthenticationToken token, AuthenticationInfo info)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>{
        CredentialsMatcher cm = getCredentialsMatcher();
        <span class="hljs-keyword">if</span> (cm != <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">if</span> (!cm.doCredentialsMatch(token, info)) {
                <span class="hljs-comment">//not successful - throw an exception to indicate this:</span>
                String msg = <span class="hljs-string">"Submitted credentials for token ["</span> + token + <span class="hljs-string">"] did not match the expected credentials."</span>;
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IncorrectCredentialsException(msg);
            }
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AuthenticationException(<span class="hljs-string">"A CredentialsMatcher must be configured in order to verify "</span> +
                    <span class="hljs-string">"credentials during authentication.  If you do not wish for credentials to be examined, you "</span> +
                    <span class="hljs-string">"can configure an "</span> + AllowAllCredentialsMatcher.class.getName() + <span class="hljs-string">" instance."</span>);
        }
    }
</pre>
<p>以上我们知道了CredentialsMatcher所处的认证的位置及作用，下面就要详细看看具体的匹配过程，还是接口设计图：</p>
<p><a href="http://image.codeweblog.com/upload/b/d3/bd3b134a8b42e8c8.png" class="lightbox"><img src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/bd3b134a8b42e8c8_thumb.png" alt="shiro源码分析(五)CredentialsMatcher" title="shiro源码分析(五)CredentialsMatcher"></a><br><br>
对于上图的三个分支，一个一个来说。<br>
对于AllowAllCredentialsMatcher：</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AllowAllCredentialsMatcher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CredentialsMatcher</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">doCredentialsMatch</span><span class="hljs-params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
    }
}
</pre>
<p>都返回true，这意味着，只要该用户名存在即可，不用去验证密码是否匹配。<br>
对于PasswordMatcher：</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PasswordMatcher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CredentialsMatcher</span> </span>{

    <span class="hljs-keyword">private</span> PasswordService passwordService;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PasswordMatcher</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">this</span>.passwordService = <span class="hljs-keyword">new</span> DefaultPasswordService();
    }
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">doCredentialsMatch</span><span class="hljs-params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>{
        <span class="hljs-comment">//确保有PasswordService，若没有抛异常</span>
        PasswordService service = ensurePasswordService();
        <span class="hljs-comment">//获取提交的密码</span>
        Object submittedPassword = getSubmittedPassword(token);
        <span class="hljs-comment">//获取服务器端存储的密码</span>
        Object storedCredentials = getStoredPassword(info);
        <span class="hljs-comment">//服务器端存储的密码必须是String或者Hash类型（待会详细介绍什么是Hash），见该方法</span>
        assertStoredCredentialsType(storedCredentials);

        <span class="hljs-comment">//对服务器端存储的密码分成两类来处理，一类是String，另一类是Hash</span>
        <span class="hljs-keyword">if</span> (storedCredentials <span class="hljs-keyword">instanceof</span> Hash) {
            Hash hashedPassword = (Hash)storedCredentials;
            HashingPasswordService hashingService = assertHashingPasswordService(service);
            <span class="hljs-keyword">return</span> hashingService.passwordsMatch(submittedPassword, hashedPassword);
        }
        <span class="hljs-comment">//otherwise they are a String (asserted in the 'assertStoredCredentialsType' method call above):</span>
        String formatted = (String)storedCredentials;
        <span class="hljs-keyword">return</span> passwordService.passwordsMatch(submittedPassword, formatted);
    }
    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assertStoredCredentialsType</span><span class="hljs-params">(Object credentials)</span> </span>{
        <span class="hljs-keyword">if</span> (credentials <span class="hljs-keyword">instanceof</span> String || credentials <span class="hljs-keyword">instanceof</span> Hash) {
            <span class="hljs-keyword">return</span>;
        }

        String msg = <span class="hljs-string">"Stored account credentials are expected to be either a "</span> +
                Hash.class.getName() + <span class="hljs-string">" instance or a formatted hash String."</span>;
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(msg);
    }

}
</pre>
<p>内部使用一个PasswordService 来完成匹配。从上面的匹配过程中，我们了解到了，对于服务器端存储的密码分成String和Hash两种，然后由PasswordService 来分别处理。所以PasswordMatcher 也只是完成了一个流程工作，具体的内容要到PasswordService 来看。<br>
到底什么是Hash呢？<br>
先看下接口图：<br>
<a href="http://image.codeweblog.com/upload/e/5f/e5f3fb13c93e9cef.png" class="lightbox"><img src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/e5f3fb13c93e9cef_thumb.png" alt="shiro源码分析(五)CredentialsMatcher" title="shiro源码分析(五)CredentialsMatcher"></a><br><br>
看下ByteSource：</p>
<pre class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ByteSource</span> {
    <span class="hljs-keyword">byte</span>[] getBytes();
    <span class="hljs-function">String <span class="hljs-title">toHex</span><span class="hljs-params">()</span></span>;
    <span class="hljs-function">String <span class="hljs-title">toBase64</span><span class="hljs-params">()</span></span>;
    <span class="hljs-comment">//略</span>
}
</pre>
<p>就维护了一个byte[]数组。<br>
看下SimpleByteSource的实现：</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleByteSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ByteSource</span> </span>{

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] bytes;
    <span class="hljs-keyword">private</span> String cachedHex;
    <span class="hljs-keyword">private</span> String cachedBase64;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SimpleByteSource</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] bytes)</span> </span>{
        <span class="hljs-keyword">this</span>.bytes = bytes;
    }
<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toHex</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">this</span>.cachedHex == <span class="hljs-keyword">null</span> ) {
            <span class="hljs-keyword">this</span>.cachedHex = Hex.encodeToString(getBytes());
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.cachedHex;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toBase64</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">this</span>.cachedBase64 == <span class="hljs-keyword">null</span> ) {
            <span class="hljs-keyword">this</span>.cachedBase64 = Base64.encodeToString(getBytes());
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.cachedBase64;
    }
  <span class="hljs-comment">//略</span>
}
</pre>
<p>toHex就是将byte数组准换成16进制形式的字符串。toBase64就是将byte数组进行base64编码。<br>
Hex.encodeToString(getBytes()) 详情如下：</p>
<pre class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Hex</span> {

    <span class="hljs-comment">/**
     * Used to build output as Hex
     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-keyword">char</span>[] DIGITS = {
            <span class="hljs-string">'0'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">'7'</span>,
            <span class="hljs-string">'8'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'f'</span>
    };
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encodeToString</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] bytes)</span> </span>{
        <span class="hljs-keyword">char</span>[] encodedChars = encode(bytes);
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(encodedChars);
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span>[] encode(<span class="hljs-keyword">byte</span>[] data) {

        <span class="hljs-keyword">int</span> l = data.length;

        <span class="hljs-keyword">char</span>[] <span class="hljs-keyword">out</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[l &lt;&lt; <span class="hljs-number">1</span>];

        <span class="hljs-comment">// two characters form the hex value.</span>
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; l; i++) {
            <span class="hljs-keyword">out</span>[j++] = DIGITS[(<span class="hljs-number">0xF0</span> &amp; data[i]) &gt;&gt;&gt; <span class="hljs-number">4</span>];
            <span class="hljs-keyword">out</span>[j++] = DIGITS[<span class="hljs-number">0x0F</span> &amp; data[i]];
        }

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">out</span>;
    }
     <span class="hljs-comment">//略</span>
}
</pre>
<p>对于一个byte[] data数组，byte含有8位，(0xF0 &amp; data[i]) &gt;&gt;&gt; 4 表示取其高四位的值。如<br>
当data[i]=01001111时，0xF0 &amp; data[i]则为01000000,然后右移四位则变成00000100即为值4，所以DIGITS[(0xF0 &amp; data[i])=DIGITS[4]=4，同理data[i]的低四位变成f。最终的结果为一个byte 01001111变成两个char 4f。<br>
Base64.encodeToString(getBytes())：就稍微比较麻烦，这里不再详细说明。原理的话可以到网上搜下，有很多这样的文章。还是回到ByteSource的接口图，该轮到Hash了。</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Hash</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ByteSource</span> </span>{
    <span class="hljs-function">String <span class="hljs-title">getAlgorithmName</span><span class="hljs-params">()</span></span>;
    <span class="hljs-function">ByteSource <span class="hljs-title">getSalt</span><span class="hljs-params">()</span></span>;
    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getIterations</span><span class="hljs-params">()</span></span>;
}
</pre>
<p>多添加了三个属性,算法名、盐值、hash次数。<br>
继续看Hash的实现者AbstractHash：</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstractHash</span><span class="hljs-params">(Object source, Object salt, <span class="hljs-keyword">int</span> hashIterations)</span> <span class="hljs-keyword">throws</span> CodecException </span>{
        <span class="hljs-keyword">byte</span>[] sourceBytes = toBytes(source);
        <span class="hljs-keyword">byte</span>[] saltBytes = <span class="hljs-keyword">null</span>;
        <span class="hljs-keyword">if</span> (salt != <span class="hljs-keyword">null</span>) {
            saltBytes = toBytes(salt);
        }
        <span class="hljs-keyword">byte</span>[] hashedBytes = hash(sourceBytes, saltBytes, hashIterations);
        setBytes(hashedBytes);
    }
</pre>
<p>整个过程就是根据源source和salt和hashIterations（hash次数），算出一个新的byte数组。<br>
再来看下是如何生成新数组的：</p>
<pre class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">byte</span>[] hash(<span class="hljs-keyword">byte</span>[] bytes, <span class="hljs-keyword">byte</span>[] salt, <span class="hljs-keyword">int</span> hashIterations) <span class="hljs-keyword">throws</span> UnknownAlgorithmException {
        MessageDigest digest = getDigest(getAlgorithmName());
        <span class="hljs-keyword">if</span> (salt != <span class="hljs-keyword">null</span>) {
            digest.reset();
            digest.update(salt);
        }
        <span class="hljs-keyword">byte</span>[] hashed = digest.digest(bytes);
        <span class="hljs-keyword">int</span> iterations = hashIterations - <span class="hljs-number">1</span>; <span class="hljs-comment">//already hashed once above</span>
        <span class="hljs-comment">//iterate remaining number:</span>
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; iterations; i++) {
            digest.reset();
            hashed = digest.digest(hashed);
        }
        <span class="hljs-keyword">return</span> hashed;
    }
</pre>
<p>看到这里就明白了，MessageDigest 是jdk自带的java.security包中的工具，用于对数据进行加密。可以使用不同的加密算法，举个简单的例子，如用md5进行加密。md5是对一个任意的byte数组进行加密变成固定长度的128位，即16个字节。然后这16个字节的展现有多种形式，这就与md5本身没关系了。展现形式如：把加密后的128位即16个字节进行Hex.encodeToString操作，即每个字节转换成两个字符（高四位一个字符，低四位一个字符）。到这个网址<a href="http://www.cmd5.com/" rel="external nofollow noreferrer">http://www.cmd5.com/</a>中去输入字符串"lg",得到的md5（"lg",32）的结果为 a608b9c44912c72db6855ad555397470，下面我们就来做出此结果</p>
<pre class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> throws NoSuchAlgorithmException, UnsupportedEncodingException</span>{
        MessageDigest md5=MessageDigest.getInstance(<span class="hljs-string">"MD5"</span>);
        String str=<span class="hljs-string">"lg"</span>;
        md5.reset();
        <span class="hljs-keyword">byte</span>[] ret=md5.digest(str.getBytes(<span class="hljs-string">"UTF-8"</span>));
        System.<span class="hljs-keyword">out</span>.println(Hex.encodeToString(ret));
    }
</pre>
<p>md5.reset()表示要清空要加密的源数据。digest（byte[]）表示将该数据填充到源数据中，然后加密。<br>
md5算出结果byte[] ret后，我们选择的展现形式是Hex.encodeToString(ret）即转换成16进制字符表示。这里的Hex就是借用shiro的Hex。结果如下：</p>
<pre class="hljs nginx"><span class="hljs-title">a608b9c44912c72db6855ad555397470</span>
</pre>
<p>和上面的结果一样，也就是说该网址对md5加密后的结果也是采用转换成16进制字符的展现形式。该网址的md5(lg,16) = 4912c72db6855ad5 则是取自上述结果的中间字符。<br>
简单介绍完md5后，继续回到AbstractHash的hash方法中，就变得很简单。digest.update(salt)方法就是向源数据中继续添加要加密的数据，digest.digest(hashed)内部调用了update方法即先填充数据，然后执行加密过程。<br>
所以这里的过程为：<br>
第一轮： salt和bytes作为源数据加密得到hashed byte数组<br>
第二轮：如果传递进来的hashIterations hash次数大于1的话，要对上述结果继续进行加密<br>
得到最终的加密结果。<br>
AbstractHash对子类留了一个抽象方法public abstract String getAlgorithmName()，用于获取加密算法名称。然而此类被标记为过时，推荐使用它的子类SimpleHash，不过上述原理仍然没有变，不再详细去说，可以自己去查看，Hash终于解释完了，总结一下，就是根据源字节数组、算法、salt、hash次数得到一个加密的byte数组。</p>
<p>回到CredentialsMatcher的实现类PasswordMatcher中，在该类中，对服务器端存储的密码形式分成了两类，一类是String，另一类就是Hash，Hash中包含了加密采用的算法、salt、hash次数等信息。 PasswordMatcher中的PasswordService 来完成匹配过程。我们就可以试想匹配过程：若服务器端存储的密码为Hash a，则我们就能知道加密过程所采用的算法、salt、hash次数信息，然后对原密码进行这样的加密，算出一个Hash b，然后比较a b的byte数组是否一致，这只是推想，然后来看下实际内容:<br>
PasswordService 接口图如下：</p>
<p><a href="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/b21b06a0685786f3.png" class="lightbox"><img src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/b21b06a0685786f3.png" alt="shiro源码分析(五)CredentialsMatcher" title="shiro源码分析(五)CredentialsMatcher"></a><br></p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PasswordService</span> </span>{
    <span class="hljs-function">String <span class="hljs-title">encryptPassword</span><span class="hljs-params">(Object plaintextPassword)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException</span>;
    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">passwordsMatch</span><span class="hljs-params">(Object submittedPlaintext, String encrypted)</span></span>;
}
</pre>
<p>HashingPasswordService：继承了PasswordService ，加入了对Hash处理的功能</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HashingPasswordService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PasswordService</span> </span>{
    <span class="hljs-comment">//根据服务器端存储的Hash的采用的算法、salt、hash次数和原始密码得到一个进过相同加密过程的Hash</span>
    <span class="hljs-function">Hash <span class="hljs-title">hashPassword</span><span class="hljs-params">(Object plaintext)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException</span>;
    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">passwordsMatch</span><span class="hljs-params">(Object plaintext, Hash savedPasswordHash)</span></span>;
}
</pre>
<p>最终的实现类DefaultPasswordService：</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultPasswordService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HashingPasswordService</span> </span>{

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_HASH_ALGORITHM = <span class="hljs-string">"SHA-256"</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_HASH_ITERATIONS = <span class="hljs-number">500000</span>; <span class="hljs-comment">//500,000</span>

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger(DefaultPasswordService.class);

    <span class="hljs-keyword">private</span> HashService hashService;
    <span class="hljs-keyword">private</span> HashFormat hashFormat;
    <span class="hljs-keyword">private</span> HashFormatFactory hashFormatFactory;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">boolean</span> hashFormatWarned; <span class="hljs-comment">//used to avoid excessive log noise</span>

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DefaultPasswordService</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">this</span>.hashFormatWarned = <span class="hljs-keyword">false</span>;

        DefaultHashService hashService = <span class="hljs-keyword">new</span> DefaultHashService();
        hashService.setHashAlgorithmName(DEFAULT_HASH_ALGORITHM);
        hashService.setHashIterations(DEFAULT_HASH_ITERATIONS);
        hashService.setGeneratePublicSalt(<span class="hljs-keyword">true</span>); <span class="hljs-comment">//always want generated salts for user passwords to be most secure</span>
        <span class="hljs-keyword">this</span>.hashService = hashService;

        <span class="hljs-keyword">this</span>.hashFormat = <span class="hljs-keyword">new</span> Shiro1CryptFormat();
        <span class="hljs-keyword">this</span>.hashFormatFactory = <span class="hljs-keyword">new</span> DefaultHashFormatFactory();
    }
    <span class="hljs-comment">//略</span>
}
</pre>
<p>首先还是先了解属性，三个重要属性HashService 、HashFormat、HashFormatFactory 。<br>
HashService接口类图：</p>
<p><a href="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/04c4c9609edaf261.png" class="lightbox"><img src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/04c4c9609edaf261.png" alt="shiro源码分析(五)CredentialsMatcher" title="shiro源码分析(五)CredentialsMatcher"></a><br></p>
<pre class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">HashService</span> {
    <span class="hljs-function">Hash <span class="hljs-title">computeHash</span><span class="hljs-params">(HashRequest request)</span></span>;
}
</pre>
<p>将一个HashRequest计算出一个Hash。什么是HashRequest？</p>
<pre class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">HashRequest</span> {
    <span class="hljs-function">ByteSource <span class="hljs-title">getSource</span><span class="hljs-params">()</span></span>;
    <span class="hljs-function">ByteSource <span class="hljs-title">getSalt</span><span class="hljs-params">()</span></span>;
    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getIterations</span><span class="hljs-params">()</span></span>;
    <span class="hljs-function">String <span class="hljs-title">getAlgorithmName</span><span class="hljs-params">()</span></span>;
     <span class="hljs-comment">//略</span>
}
</pre>
<p>就是我们上述所说的那几个重要元素。原密码、salt、hash次数、算法名称。这个计算过程也就是上述AbstractHash的过程。<br>
再看HashService 的子类ConfigurableHashService：</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ConfigurableHashService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HashService</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setPrivateSalt</span><span class="hljs-params">(ByteSource privateSalt)</span></span>;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setHashIterations</span><span class="hljs-params">(<span class="hljs-keyword">int</span> iterations)</span></span>;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setHashAlgorithmName</span><span class="hljs-params">(String name)</span></span>;
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setRandomNumberGenerator</span><span class="hljs-params">(RandomNumberGenerator rng)</span></span>;
}
</pre>
<p>就是可以对上述几个重要元素进行设置。privateSalt和RandomNumberGenerator接下来再说，再看ConfigurableHashService的实现类DefaultHashService:</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultHashService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ConfigurableHashService</span> </span>{
     <span class="hljs-comment">//主要是用来生成随机的publicSalt</span>
    <span class="hljs-keyword">private</span> RandomNumberGenerator rng;
    <span class="hljs-keyword">private</span> String algorithmName;
    <span class="hljs-keyword">private</span> ByteSource privateSalt;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> iterations;
    <span class="hljs-comment">//标志是否去产生publicSalt</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> generatePublicSalt;
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DefaultHashService</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">this</span>.algorithmName = <span class="hljs-string">"SHA-512"</span>;
        <span class="hljs-keyword">this</span>.iterations = <span class="hljs-number">1</span>;
        <span class="hljs-keyword">this</span>.generatePublicSalt = <span class="hljs-keyword">false</span>;
        <span class="hljs-keyword">this</span>.rng = <span class="hljs-keyword">new</span> SecureRandomNumberGenerator();
    }
}
</pre>
<p>来看下它是怎么实现将HashRequest变成Hash的：</p>
<pre class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> Hash <span class="hljs-title">computeHash</span><span class="hljs-params">(HashRequest request)</span> </span>{
        <span class="hljs-keyword">if</span> (request == <span class="hljs-keyword">null</span> || request.getSource() == <span class="hljs-keyword">null</span> || request.getSource().isEmpty()) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
        }
        <span class="hljs-comment">//获取算法名字</span>
        String algorithmName = getAlgorithmName(request);
        <span class="hljs-comment">//获取原密码</span>
        ByteSource source = request.getSource();
        <span class="hljs-comment">//获取hash次数</span>
        <span class="hljs-keyword">int</span> iterations = getIterations(request);
        <span class="hljs-comment">//获取publicSalt</span>
        ByteSource publicSalt = getPublicSalt(request);
        <span class="hljs-comment">//获取privateSalt</span>
        ByteSource privateSalt = getPrivateSalt();
        <span class="hljs-comment">//结合两者</span>
        ByteSource salt = combine(privateSalt, publicSalt);
        <span class="hljs-comment">//这就是之前始终强调的原理部分，就是根据算法、原始数据、salt、hash次数进行加密</span>
        Hash computed = <span class="hljs-keyword">new</span> SimpleHash(algorithmName, source, salt, iterations);

        <span class="hljs-comment">//对于computed 有很多信息，只想对外暴漏某些信息。如publicSalt</span>
        SimpleHash result = <span class="hljs-keyword">new</span> SimpleHash(algorithmName);
        result.setBytes(computed.getBytes());
        result.setIterations(iterations);
        <span class="hljs-comment">//Only expose the public salt - not the real/combined salt that might have been used:</span>
        result.setSalt(publicSalt);

        <span class="hljs-keyword">return</span> result;
    }
</pre>
<p>第一步：获取算法，先获取request本身的算法，如果没有，则使用DefaultHashService 默认的算法，在DefaultHashService 的构造函数中默认使用SHA-512的加密算法。同理对于hash次数也是同样的逻辑。<br>
第二步：获取publicSalt</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> ByteSource <span class="hljs-title">getPublicSalt</span><span class="hljs-params">(HashRequest request)</span> </span>{

        ByteSource publicSalt = request.getSalt();

        <span class="hljs-keyword">if</span> (publicSalt != <span class="hljs-keyword">null</span> &amp;&amp; !publicSalt.isEmpty()) {
            <span class="hljs-comment">//a public salt was explicitly requested to be used - go ahead and use it:</span>
            <span class="hljs-keyword">return</span> publicSalt;
        }

        publicSalt = <span class="hljs-keyword">null</span>;

        <span class="hljs-comment">//check to see if we need to generate one:</span>
        ByteSource privateSalt = getPrivateSalt();
        <span class="hljs-keyword">boolean</span> privateSaltExists = privateSalt != <span class="hljs-keyword">null</span> &amp;&amp; !privateSalt.isEmpty();

        <span class="hljs-comment">//If a private salt exists, we must generate a public salt to protect the integrity of the private salt.</span>
        <span class="hljs-comment">//Or generate it if the instance is explicitly configured to do so:</span>
        <span class="hljs-keyword">if</span> (privateSaltExists || isGeneratePublicSalt()) {
            publicSalt = getRandomNumberGenerator().nextBytes();
        }

        <span class="hljs-keyword">return</span> publicSalt;
    }
</pre>
<p>当HashRequest request本身有salt时，则充当publicSalt直接返回。当没有时，则需要去使用RandomNumberGenerator产生一个publicSalt，当DefaultHashService 的privateSalt 存在或者DefaultHashService 的generatePublicSalt标志为true，都会去产生publicSalt。<br>
第三步：结合publicSalt和privateSalt<br>
第四步：Hash computed = new SimpleHash(algorithmName, source, salt, iterations)这就就是上文我们强调的加密核心，不再说明了，可以到上面去找。<br>
第五步：仅仅暴漏Hash computed中的某些属性，不把privateSalt 暴漏出去。至此DefaultHashService 的工作就全部完成了。</p>
<p>继续回到DefaultPasswordService：看下一个类HashFormat：</p>
<pre class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">HashFormat</span> {
    <span class="hljs-function">String <span class="hljs-title">format</span><span class="hljs-params">(Hash hash)</span></span>;
}
</pre>
<p>这个就是对Hash进行格式化输出而已，看下接口设计：</p>
<p><a href="http://image.codeweblog.com/upload/f/3b/f3b2071b23475da6.png" class="lightbox"><img src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/f3b2071b23475da6_thumb.png" alt="shiro源码分析(五)CredentialsMatcher" title="shiro源码分析(五)CredentialsMatcher"></a><br><br>
HexFormat如下</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HexFormat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HashFormat</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">format</span><span class="hljs-params">(Hash hash)</span> </span>{
        <span class="hljs-keyword">return</span> hash != <span class="hljs-keyword">null</span> ? hash.toHex() : <span class="hljs-keyword">null</span>;
    }
}
</pre>
<p>就是调用Hash本身的toHex方法，同理Hash本身也有String toBase64()方法，所以Base64Format也是同样的道理。<br>
ModularCryptFormat和ParsableHashFormat 如下</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ModularCryptFormat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HashFormat</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOKEN_DELIMITER = <span class="hljs-string">"$"</span>;
    <span class="hljs-function">String <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>;
}
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ParsableHashFormat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HashFormat</span> </span>{
    <span class="hljs-function">Hash <span class="hljs-title">parse</span><span class="hljs-params">(String formatted)</span></span>;
}
</pre>
<p>他们的实现类Shiro1CryptFormat，来看看是如何format的和如何parse的：</p>
<pre class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">format</span><span class="hljs-params">(Hash hash)</span> </span>{
        <span class="hljs-keyword">if</span> (hash == <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
        }

        String algorithmName = hash.getAlgorithmName();
        ByteSource salt = hash.getSalt();
        <span class="hljs-keyword">int</span> iterations = hash.getIterations();
        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(MCF_PREFIX).append(algorithmName).append(TOKEN_DELIMITER).append(iterations).append(TOKEN_DELIMITER);

        <span class="hljs-keyword">if</span> (salt != <span class="hljs-keyword">null</span>) {
            sb.append(salt.toBase64());
        }

        sb.append(TOKEN_DELIMITER);
        sb.append(hash.toBase64());

        <span class="hljs-keyword">return</span> sb.toString();
    }
</pre>
<p>format就是将一些算法信息、hash次数、salt等进行字符串的拼接，parse过程则是根据拼接的信息逆向获取算法信息、hash次数、salt等信息而已。这里就终于明白了，为什么PasswordMatcher 对服务器端存储的密码分成Hash和String来处理了，他们都是存储算法、salt、hash次数等信息的地方，Hash直接是以结构化的类来存储，而String则是以格式化的字符串来存储，需要parse才能获取算法、salt等信息。</p>
<p>HashFormat则也完成了。DefaultPasswordService还剩最后一个HashFormatFactory了，它则是用来生成不同的HashFormat的。</p>
<pre class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">HashFormatFactory</span> {
    <span class="hljs-function">HashFormat <span class="hljs-title">getInstance</span><span class="hljs-params">(String token)</span></span>;
}
</pre>
<p>根据String密码（格式化过的）来寻找对应的HashFormat。这里不再详细介绍了，有兴趣的可以自己去研究。<br>
回到我们关注的重点，密码匹配过程：DefaultPasswordService</p>
<pre class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DefaultPasswordService</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">this</span>.hashFormatWarned = <span class="hljs-keyword">false</span>;

        DefaultHashService hashService = <span class="hljs-keyword">new</span> DefaultHashService();
        hashService.setHashAlgorithmName(DEFAULT_HASH_ALGORITHM);
        hashService.setHashIterations(DEFAULT_HASH_ITERATIONS);
        hashService.setGeneratePublicSalt(<span class="hljs-keyword">true</span>); <span class="hljs-comment">//always want generated salts for user passwords to be most secure</span>
        <span class="hljs-keyword">this</span>.hashService = hashService;

        <span class="hljs-keyword">this</span>.hashFormat = <span class="hljs-keyword">new</span> Shiro1CryptFormat();
        <span class="hljs-keyword">this</span>.hashFormatFactory = <span class="hljs-keyword">new</span> DefaultHashFormatFactory();
    }
</pre>
<p>使用了，DefaultHashService 和Shiro1CryptFormat和DefaultHashFormatFactory。<br>
先来看看是如何匹配加密密码是String的，后面再看看是如何匹配Hash的</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">passwordsMatch</span><span class="hljs-params">(Object submittedPlaintext, String saved)</span> </span>{
        ByteSource plaintextBytes = createByteSource(submittedPlaintext);

        <span class="hljs-keyword">if</span> (saved == <span class="hljs-keyword">null</span> || saved.length() == <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">return</span> plaintextBytes == <span class="hljs-keyword">null</span> || plaintextBytes.isEmpty();
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">if</span> (plaintextBytes == <span class="hljs-keyword">null</span> || plaintextBytes.isEmpty()) {
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
            }
        }

        <span class="hljs-comment">//First check to see if we can reconstitute the original hash - this allows us to</span>
        <span class="hljs-comment">//perform password hash comparisons even for previously saved passwords that don't</span>
        <span class="hljs-comment">//match the current HashService configuration values.  This is a very nice feature</span>
        <span class="hljs-comment">//for password comparisons because it ensures backwards compatibility even after</span>
        <span class="hljs-comment">//configuration changes.</span>
        HashFormat discoveredFormat = <span class="hljs-keyword">this</span>.hashFormatFactory.getInstance(saved);

        <span class="hljs-keyword">if</span> (discoveredFormat != <span class="hljs-keyword">null</span> &amp;&amp; discoveredFormat <span class="hljs-keyword">instanceof</span> ParsableHashFormat) {

            ParsableHashFormat parsableHashFormat = (ParsableHashFormat)discoveredFormat;
            Hash savedHash = parsableHashFormat.parse(saved);

            <span class="hljs-keyword">return</span> passwordsMatch(submittedPlaintext, savedHash);
        }

        <span class="hljs-comment">//If we're at this point in the method's execution, We couldn't reconstitute the original hash.</span>
        <span class="hljs-comment">//So, we need to hash the submittedPlaintext using current HashService configuration and then</span>
        <span class="hljs-comment">//compare the formatted output with the saved string.  This will correctly compare passwords,</span>
        <span class="hljs-comment">//but does not allow changing the HashService configuration without breaking previously saved</span>
        <span class="hljs-comment">//passwords:</span>

        <span class="hljs-comment">//The saved text value can't be reconstituted into a Hash instance.  We need to format the</span>
        <span class="hljs-comment">//submittedPlaintext and then compare this formatted value with the saved value:</span>
        HashRequest request = createHashRequest(plaintextBytes);
        Hash computed = <span class="hljs-keyword">this</span>.hashService.computeHash(request);
        String formatted = <span class="hljs-keyword">this</span>.hashFormat.format(computed);

        <span class="hljs-keyword">return</span> saved.equals(formatted);
    }
</pre>
<p>分成了两个分支，第一个分支就是能将加密的String密码使用HashFormat解析成Hash，然后调用public boolean passwordsMatch(Object plaintext, Hash saved)即Hash的匹配方式，第二个分支就是，不能解析的情况下，把原始密码封装成HashRequest ，然后使用HashService来讲HashRequest计算出一个Hash，再用HashFormat来格式化它变成String字符串，两个字符串进行equals比较。<br>
对于Hash的匹配方式：</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">passwordsMatch</span><span class="hljs-params">(Object plaintext, Hash saved)</span> </span>{
        ByteSource plaintextBytes = createByteSource(plaintext);

        <span class="hljs-keyword">if</span> (saved == <span class="hljs-keyword">null</span> || saved.isEmpty()) {
            <span class="hljs-keyword">return</span> plaintextBytes == <span class="hljs-keyword">null</span> || plaintextBytes.isEmpty();
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">if</span> (plaintextBytes == <span class="hljs-keyword">null</span> || plaintextBytes.isEmpty()) {
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
            }
        }

        HashRequest request = buildHashRequest(plaintextBytes, saved);

        Hash computed = <span class="hljs-keyword">this</span>.hashService.computeHash(request);

        <span class="hljs-keyword">return</span> saved.equals(computed);
    }
<span class="hljs-function"><span class="hljs-keyword">protected</span> HashRequest <span class="hljs-title">buildHashRequest</span><span class="hljs-params">(ByteSource plaintext, Hash saved)</span> </span>{
        <span class="hljs-comment">//keep everything from the saved hash except for the source:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HashRequest.Builder().setSource(plaintext)
                <span class="hljs-comment">//now use the existing saved data:</span>
                .setAlgorithmName(saved.getAlgorithmName())
                .setSalt(saved.getSalt())
                .setIterations(saved.getIterations())
                .build();
    }
</pre>
<p>这个过程就是我们之前设想的过程，就是很据已由的Hash saved的算法、salt、hash次数对Object plaintext进行同样的加密过程，然后匹配saved.equals(computed)的信息是否一致。至此我们就走通了PasswordMatcher的整个过程。这是CredentialsMatcher的第二个分支，我们继续看CredentialsMatcher的第三个分支SimpleCredentialsMatcher：</p>
<pre class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">doCredentialsMatch</span><span class="hljs-params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>{
        Object tokenCredentials = getCredentials(token);
        Object accountCredentials = getCredentials(info);
        <span class="hljs-keyword">return</span> equals(tokenCredentials, accountCredentials);
    }
<span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">getCredentials</span><span class="hljs-params">(AuthenticationToken token)</span> </span>{
        <span class="hljs-keyword">return</span> token.getCredentials();
    }
    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">getCredentials</span><span class="hljs-params">(AuthenticationInfo info)</span> </span>{
        <span class="hljs-keyword">return</span> info.getCredentials();
    }
<span class="hljs-function"><span class="hljs-keyword">protected</span> boolean <span class="hljs-title">equals</span><span class="hljs-params">(Object tokenCredentials, Object accountCredentials)</span> </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">log</span>.isDebugEnabled()) {
            <span class="hljs-built_in">log</span>.debug(<span class="hljs-string">"Performing credentials equality check for tokenCredentials of type ["</span> +
                    tokenCredentials.getClass().getName() + <span class="hljs-string">" and accountCredentials of type ["</span> +
                    accountCredentials.getClass().getName() + <span class="hljs-string">"]"</span>);
        }
        <span class="hljs-keyword">if</span> (isByteSource(tokenCredentials) &amp;&amp; isByteSource(accountCredentials)) {
            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">log</span>.isDebugEnabled()) {
                <span class="hljs-built_in">log</span>.debug(<span class="hljs-string">"Both credentials arguments can be easily converted to byte arrays.  Performing "</span> +
                        <span class="hljs-string">"array equals comparison"</span>);
            }
            byte[] tokenBytes = toBytes(tokenCredentials);
            byte[] accountBytes = toBytes(accountCredentials);
            <span class="hljs-keyword">return</span> Arrays.equals(tokenBytes, accountBytes);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">return</span> accountCredentials.equals(tokenCredentials);
        }
    }
</pre>
<p>它的实现比较简单，就是直接比较AuthenticationToken的getCredentials() 和AuthenticationInfo 的getCredentials()内容，若为ByteSource则匹配下具体的内容，否则直接匹配引用。<br>
看下它的子类HashedCredentialsMatcher的匹配过程:</p>
<pre class="hljs nginx"><span class="hljs-title">public</span> boolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo <span class="hljs-built_in">info</span>) {
        <span class="hljs-title">Object</span> tokenHashedCredentials = hashProvidedCredentials(token, <span class="hljs-built_in">info</span>);
        <span class="hljs-title">Object</span> accountCredentials = getCredentials(<span class="hljs-built_in">info</span>);
        <span class="hljs-title">return</span> equals(tokenHashedCredentials, accountCredentials);
    }
</pre>
<p>其中equals方法仍然是调用父类的方法，即一旦为ByteSource则进行byte匹配，否则进行引用匹配。只是这里的tokenHashedCredentials 和accountCredentials 和父类的方式不一样，如下：</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">hashProvidedCredentials</span><span class="hljs-params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>{
        Object salt = <span class="hljs-keyword">null</span>;
        <span class="hljs-keyword">if</span> (info <span class="hljs-keyword">instanceof</span> SaltedAuthenticationInfo) {
            salt = ((SaltedAuthenticationInfo) info).getCredentialsSalt();
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-comment">//retain 1.0 backwards compatibility:</span>
            <span class="hljs-keyword">if</span> (isHashSalted()) {
                salt = getSalt(token);
            }
        }
        <span class="hljs-keyword">return</span> hashProvidedCredentials(token.getCredentials(), salt, getHashIterations());
    }
<span class="hljs-function"><span class="hljs-keyword">protected</span> Hash <span class="hljs-title">hashProvidedCredentials</span><span class="hljs-params">(Object credentials, Object salt, <span class="hljs-keyword">int</span> hashIterations)</span> </span>{
        String hashAlgorithmName = assertHashAlgorithmName();
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleHash(hashAlgorithmName, credentials, salt, hashIterations);
    }
</pre>
<p>可以看到仍然是使用算法名称和credentials（用户提交的未加密的）、salt、hash次数构建一个SimpleHash（构造时进行加密）。<br>
再看对于已加密的credentials则是也构建一个SimpleHash，但是不再进行加密过程：</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">getCredentials</span><span class="hljs-params">(AuthenticationInfo info)</span> </span>{
        Object credentials = info.getCredentials();

        <span class="hljs-keyword">byte</span>[] storedBytes = toBytes(credentials);

        <span class="hljs-keyword">if</span> (credentials <span class="hljs-keyword">instanceof</span> String || credentials <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">char</span>[]) {
            <span class="hljs-comment">//account.credentials were a char[] or String, so</span>
            <span class="hljs-comment">//we need to do text decoding first:</span>
            <span class="hljs-keyword">if</span> (isStoredCredentialsHexEncoded()) {
                storedBytes = Hex.decode(storedBytes);
            } <span class="hljs-keyword">else</span> {
                storedBytes = Base64.decode(storedBytes);
            }
        }
        AbstractHash hash = newHashInstance();
        hash.setBytes(storedBytes);
        <span class="hljs-keyword">return</span> hash;
    }
<span class="hljs-function"><span class="hljs-keyword">protected</span> AbstractHash <span class="hljs-title">newHashInstance</span><span class="hljs-params">()</span> </span>{
        String hashAlgorithmName = assertHashAlgorithmName();
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleHash(hashAlgorithmName);
    }
</pre>
<p>对于HashedCredentialsMatcher也就是说AuthenticationToken token, AuthenticationInfo info都去构建一个SimpleHash，前者构建时执行加密过程，后者（已加密）不需要去执行加密过程，然后匹配这两个SimpleHash是否一致。然后就是HashedCredentialsMatcher的子类（全部被标记为已废弃），如Md5CredentialsMatcher：</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Md5CredentialsMatcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HashedCredentialsMatcher</span> </span>{

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Md5CredentialsMatcher</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">super</span>();
        setHashAlgorithmName(Md5Hash.ALGORITHM_NAME);
    }
}
</pre>
<p>仅仅是将HashedCredentialsMatcher的算法改为md5，所以Md5CredentialsMatcher 本身就没有存在的价值。HashedCredentialsMatcher其他子类都是同样的道理。<br>
至此CredentialsMatcher的三个分支都完成了。</p>
<p>已经很长了，下一篇文章以具体的案例来使用上述原理。</p>
<p>作者：乒乓狂魔</p><!-- lightBox --><script type="text/javascript" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/js.php"></script><script type="text/javascript" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/jquery-1.2.6.pack.js"></script><script type="text/javascript" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/jquery.lightbox-0.5.js"></script><link rel="stylesheet" type="text/css" href="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/jquery.lightbox-0.5.css" media="screen"><!-- / lightBox  --><script type="text/javascript">$(function() {$("a.lightbox").lightBox();});</script>  </div>

  <div style="text-align: center; padding: 10px 0;">
<script type="text/javascript">
    /*640*60链接*/
    var cpro_id = "u2118662";
</script>
<script src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/c.js" type="text/javascript"></script><div id="BAIDU_SSP__wrapper_u2118662_1"><iframe id="iframeu2118662_1" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/kctm(3).htm" width="640" height="60" align="center,center" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" style="border:0; vertical-align:bottom;margin:0;" allowtransparency="true"></iframe></div>
</div>

<!-- 内页下 -->
<div style="padding: 10px 0; text-align: center;">
</div>

  
  
  <span class="pt_info pre1"> 
    <span>分类：<a href="http://www.codeweblog.com/category/shiro%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90/" title="shiro源码分析">shiro源码分析</a></span>
    <span id="pubtime">时间：2015-02-07</span>
    <span id="hitcount">人气：<strong>2408</strong></span>
  </span>
    
  <div class="hot_tags">
    <span>本文关键词：</span>
    <a href="http://www.codeweblog.com/tag/shiro/" title="Shiro">Shiro</a>  </div>

  <div class="shareto">
    <span>分享到：</span>
    <div class="bdsharebuttonbox bdshare-button-style0-24" data-bd-bind="1487732124651"><a href="http://www.codeweblog.com/shiro%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BA%94-credentialsmatcher/#" class="bds_more" data-cmd="more"></a><a href="http://www.codeweblog.com/shiro%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BA%94-credentialsmatcher/#" class="bds_qzone" data-cmd="qzone" title="分享到QQ空间"></a><a href="http://www.codeweblog.com/shiro%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BA%94-credentialsmatcher/#" class="bds_tsina" data-cmd="tsina" title="分享到新浪微博"></a><a href="http://www.codeweblog.com/shiro%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BA%94-credentialsmatcher/#" class="bds_tqq" data-cmd="tqq" title="分享到腾讯微博"></a><a href="http://www.codeweblog.com/shiro%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BA%94-credentialsmatcher/#" class="bds_renren" data-cmd="renren" title="分享到人人网"></a><a href="http://www.codeweblog.com/shiro%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BA%94-credentialsmatcher/#" class="bds_weixin" data-cmd="weixin" title="分享到微信"></a></div>
<script>window._bd_share_config={"common":{"bdSnsKey":{},"bdText":"","bdMini":"2","bdMiniList":false,"bdPic":"","bdStyle":"0","bdSize":"24"},"share":{}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];</script>
  </div>
  
  <div id="commentDiv">
        <!-- UY BEGIN -->
<div id="uyan_frame"><iframe id="uyan_ifr_5923208" scrolling="no" frameborder="0" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/saved_resource.htm" style="display: block !important; width: 100% !important; border: 0px none !important; overflow: hidden !important; height: 454px;"></iframe></div>
<script type="text/javascript" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/uyan.js"></script><script type="text/javascript" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/plugin.client.js" charset="utf-8"></script>
<!-- UY END -->
      </div>
  

  <!-- 相关文章 -->
  <div class="related_post">
    <h2>相关文章</h2>
    <ul class="list_1">
  	    		      <li class="clearfix">
          <a target="_blank" href="http://www.codeweblog.com/shiro-to-protect-applications-using-the-ajax-grails/">Shiro to protect applications using the Ajax Grails</a>
          <span class="date">2010-03-29</span>
          <div class="clearfix"></div>
                </li>
        		      <li class="clearfix">
          <a target="_blank" href="http://www.codeweblog.com/permission-will-be-applied-as-the-basis-of-shiro-turn/">Permission will be applied as the basis of Shiro [turn]</a>
          <span class="date">2011-07-15</span>
          <div class="clearfix"></div>
                </li>
        		      <li class="clearfix">
          <a target="_blank" href="http://www.codeweblog.com/%e6%9d%83%e9%99%90%e6%a1%86%e6%9e%b6-shiro/">权限框架 Shiro</a>
          <span class="date">2010-01-12</span>
          <div class="clearfix"></div>
                </li>
        		      <li class="clearfix">
          <a target="_blank" href="http://www.codeweblog.com/jfinal%e7%9a%84shiro%e6%9d%83%e9%99%90%e7%ae%a1%e7%90%86%e6%8f%92%e4%bb%b6-jfinalshiroplugin/">JFinal的Shiro权限管理插件 JFinalShiroPlugin</a>
          <span class="date">2013-11-10</span>
          <div class="clearfix"></div>
                </li>
        		      <li class="clearfix">
          <a target="_blank" href="http://www.codeweblog.com/apache-shiro-%e4%bd%bf%e7%94%a8%e6%89%8b%e5%86%8c-%e5%9b%9b-realm-%e5%ae%9e%e7%8e%b0/">Apache Shiro 使用手册(四) Realm 实现</a>
          <span class="date">2013-11-22</span>
          <div class="clearfix"></div>
                </li>
        		      <li class="clearfix">
          <a target="_blank" href="http://www.codeweblog.com/apache-shiro-%e4%bd%bf%e7%94%a8%e6%89%8b%e5%86%8c-%e4%ba%8c-shiro-%e8%ae%a4%e8%af%81/">Apache Shiro 使用手册(二) Shiro 认证</a>
          <span class="date">2014-01-03</span>
          <div class="clearfix"></div>
                </li>
        		      <li class="clearfix">
          <a target="_blank" href="http://www.codeweblog.com/%e5%9f%ba%e4%ba%8espring%e6%a1%86%e6%9e%b6%e7%9a%84shiro%e9%85%8d%e7%bd%ae%e6%96%b9%e6%b3%95/">基于Spring框架的Shiro配置方法</a>
          <span class="date">2014-04-12</span>
          <div class="clearfix"></div>
                </li>
        		      <li class="clearfix">
          <a target="_blank" href="http://www.codeweblog.com/%e8%b7%9f%e6%88%91%e5%ad%a6apache-shiro%e5%ae%89%e5%85%a8%e6%a1%86%e6%9e%b6/">跟我学Apache Shiro安全框架</a>
          <span class="date">2014-04-20</span>
          <div class="clearfix"></div>
                </li>
        		      <li class="clearfix">
          <a target="_blank" href="http://www.codeweblog.com/%e8%ae%a9apache-shiro%e4%bf%9d%e6%8a%a4%e4%bd%a0%e7%9a%84%e5%ba%94%e7%94%a8/">让Apache Shiro保护你的应用</a>
          <span class="date">2014-10-27</span>
          <div class="clearfix"></div>
                </li>
        		      <li class="clearfix">
          <a target="_blank" href="http://www.codeweblog.com/apache-shiro-%e4%bd%bf%e7%94%a8%e6%89%8b%e5%86%8c-%e4%b8%80-shiro%e6%9e%b6%e6%9e%84%e4%bb%8b%e7%bb%8d/">Apache Shiro 使用手册(一) Shiro架构介绍</a>
          <span class="date">2014-12-14</span>
          <div class="clearfix"></div>
                </li>
          </ul>
  </div>
  

</div>

  <!-- content End -->
    


    <!-- 侧边区域 -->
    <div class="sidebar">
      <ul>
        <li class="sb_list">
            <div class="bx"> 
</div>
        </li>
        <li class="sb_list sbb">
          <div class="tags_title">所有分类</div>
          <ul class="side_tags sub_ul">
<li><a href="http://www.codeweblog.com/category/%e5%b7%a5%e4%bd%9c%e6%97%a5%e5%bf%97" title="工作日志">工作日志</a></li><li><a href="http://www.codeweblog.com/category/%e8%b5%84%e8%ae%af" title="资讯">资讯</a></li><li><a href="http://www.codeweblog.com/category/%e7%bc%96%e7%a8%8b" title="编程">编程</a></li><li><a href="http://www.codeweblog.com/category/%e5%a5%bd%e6%b8%b8%e6%88%8f" title="好游戏">好游戏</a></li><li><a href="http://www.codeweblog.com/category/%e8%bd%ac%e8%b4%b4%e7%9a%84%e6%96%87%e7%ab%a0" title="转贴的文章">转贴的文章</a></li><li><a href="http://www.codeweblog.com/category/javascript%e6%8a%80%e5%b7%a7" title="javascript技巧">javascript技巧</a></li><li><a href="http://www.codeweblog.com/category/%e5%bc%80%e6%ba%90" title="开源">开源</a></li><li><a href="http://www.codeweblog.com/category/%e8%81%8c%e4%b8%9a" title="职业">职业</a></li><li><a href="http://www.codeweblog.com/category/%e4%ba%92%e8%81%94%e7%bd%91" title="互联网">互联网</a></li><li><a href="http://www.codeweblog.com/category/%e4%ba%a7%e5%93%81" title="产品">产品</a></li><li><a href="http://www.codeweblog.com/category/%e9%a6%96%e9%a1%b5" title="首页">首页</a></li><li><a href="http://www.codeweblog.com/category/php%e6%8a%80%e5%b7%a7" title="php技巧">php技巧</a></li><li><a href="http://www.codeweblog.com/category/jquery" title="jquery">jquery</a></li><li><a href="http://www.codeweblog.com/category/%e6%97%a5%e5%b8%b8%e8%ae%b0%e5%bd%95" title="日常记录">日常记录</a></li><li><a href="http://www.codeweblog.com/category/%e8%bd%af%e4%bb%b6%e6%b5%8b%e8%af%84" title="软件测评">软件测评</a></li><li><a href="http://www.codeweblog.com/category/android" title="Android">Android</a></li><li><a href="http://www.codeweblog.com/category/%e7%ae%a1%e7%90%86" title="管理">管理</a></li><li><a href="http://www.codeweblog.com/category/linux" title="linux">linux</a></li><li><a href="http://www.codeweblog.com/category/%e5%ae%9e%e7%94%a8%e6%8a%80%e5%b7%a7" title="实用技巧">实用技巧</a></li><li><a href="http://www.codeweblog.com/category/%e8%80%83%e8%af%95" title="考试">考试</a></li><li><a href="http://www.codeweblog.com/category/mysql" title="Mysql">Mysql</a></li><li><a href="http://www.codeweblog.com/category/c-%e6%95%99%e7%a8%8b" title="C#教程">C#教程</a></li><li><a href="http://www.codeweblog.com/category/web2-0%e4%b8%8esns" title="Web2.0与SNS">Web2.0与SNS</a></li><li><a href="http://www.codeweblog.com/category/%e7%bd%91%e7%bb%9c%e6%9c%8d%e5%8a%a1" title="网络服务">网络服务</a></li><li><a href="http://www.codeweblog.com/category/%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f" title="操作系统">操作系统</a></li><li><a href="http://www.codeweblog.com/category/php%e5%ae%9e%e4%be%8b" title="php实例">php实例</a></li><li><a href="http://www.codeweblog.com/category/c-%e8%af%ad%e8%a8%80" title="C 语言">C 语言</a></li><li><a href="http://www.codeweblog.com/category/%e5%ba%94%e7%94%a8%e6%8a%80%e5%b7%a7" title="应用技巧">应用技巧</a></li><li><a href="http://www.codeweblog.com/category/mssql" title="MsSql">MsSql</a></li><li><a href="http://www.codeweblog.com/category/%e6%95%b0%e7%a0%81%e4%b8%8e%e6%89%8b%e6%9c%ba" title="数码与手机">数码与手机</a></li><li><a href="http://www.codeweblog.com/category/delphi" title="Delphi">Delphi</a></li><li><a href="http://www.codeweblog.com/category/%e6%b8%b8%e6%88%8f" title="游戏">游戏</a></li><li><a href="http://www.codeweblog.com/category/oracle" title="oracle">oracle</a></li><li><a href="http://www.codeweblog.com/category/%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86" title="基础知识">基础知识</a></li><li><a href="http://www.codeweblog.com/category/twitter%e5%be%ae%e5%8d%9a%e5%ae%a2" title="Twitter微博客">Twitter微博客</a></li><li><a href="http://www.codeweblog.com/category/php%e5%9f%ba%e7%a1%80" title="php基础">php基础</a></li><li><a href="http://www.codeweblog.com/category/javascript" title="JavaScript">JavaScript</a></li><li><a href="http://www.codeweblog.com/category/vbs" title="vbs">vbs</a></li>          </ul>
        </li>
        <li class="sb_list">
            
        </li>
        <li class="sb_list">
          <div class="right_con post_right_con ">
            <div class="top_news">
              <div class="bar">
                 <b>推荐阅读</b>
              </div>
              <div id="con1" class="list">
                <ul>
                  <li>
                    <a title="Eclipse的新浪微博插件" target="_blank" href="http://www.codeweblog.com/eclipse%e7%9a%84%e6%96%b0%e6%b5%aa%e5%be%ae%e5%8d%9a%e6%8f%92%e4%bb%b6/">
                      Eclipse的新浪微博插件                    </a>
                  </li>
                  <li>
                    <a title="花田考试系统 MyExam" target="_blank" href="http://www.codeweblog.com/%e8%8a%b1%e7%94%b0%e8%80%83%e8%af%95%e7%b3%bb%e7%bb%9f-myexam/">
                      花田考试系统 MyExam                    </a>
                  </li>
                  <li>
                    <a title="Javascript中的String对象详谈" target="_blank" href="http://www.codeweblog.com/javascript%e4%b8%ad%e7%9a%84string%e5%af%b9%e8%b1%a1%e8%af%a6%e8%b0%88/">
                      Javascript中的String对象详谈                    </a>
                  </li>
                  <li>
                    <a title="PHP中使用gettext来支持多语言的方法" target="_blank" href="http://www.codeweblog.com/php%e4%b8%ad%e4%bd%bf%e7%94%a8gettext%e6%9d%a5%e6%94%af%e6%8c%81%e5%a4%9a%e8%af%ad%e8%a8%80%e7%9a%84%e6%96%b9%e6%b3%95/">
                      PHP中使用gettext来支持多语言的方法                    </a>
                  </li>
                  <li>
                    <a title="JS操作字符串转换为数值并取整的代码" target="_blank" href="http://www.codeweblog.com/js%e6%93%8d%e4%bd%9c%e5%ad%97%e7%ac%a6%e4%b8%b2%e8%bd%ac%e6%8d%a2%e4%b8%ba%e6%95%b0%e5%80%bc%e5%b9%b6%e5%8f%96%e6%95%b4%e7%9a%84%e4%bb%a3%e7%a0%81/">
                      JS操作字符串转换为数值并取整的代码                    </a>
                  </li>
                  <li>
                    <a title="Android UI开发 View自绘控件 分享" target="_blank" href="http://www.codeweblog.com/android-ui%e5%bc%80%e5%8f%91-view%e8%87%aa%e7%bb%98%e6%8e%a7%e4%bb%b6-%e5%88%86%e4%ba%ab/">
                      Android UI开发 View自绘控件 分享                    </a>
                  </li>
                  <li>
                    <a title="jQuery 常见操作实现方式和常用函数方法总结" target="_blank" href="http://www.codeweblog.com/jquery-%e5%b8%b8%e8%a7%81%e6%93%8d%e4%bd%9c%e5%ae%9e%e7%8e%b0%e6%96%b9%e5%bc%8f%e5%92%8c%e5%b8%b8%e7%94%a8%e5%87%bd%e6%95%b0%e6%96%b9%e6%b3%95%e6%80%bb%e7%bb%93/">
                      jQuery 常见操作实现方式和常用函数方法总结                    </a>
                  </li>
                  <li>
                    <a title="浅析PHP的ASCII码转换类" target="_blank" href="http://www.codeweblog.com/%e6%b5%85%e6%9e%90php%e7%9a%84ascii%e7%a0%81%e8%bd%ac%e6%8d%a2%e7%b1%bb/">
                      浅析PHP的ASCII码转换类                    </a>
                  </li>
                  <li>
                    <a title="诺基亚裁员之火烧至研发:精简天马行空式项目" target="_blank" href="http://www.codeweblog.com/%e8%af%ba%e5%9f%ba%e4%ba%9a%e8%a3%81%e5%91%98%e4%b9%8b%e7%81%ab%e7%83%a7%e8%87%b3%e7%a0%94%e5%8f%91-%e7%b2%be%e7%ae%80%e5%a4%a9%e9%a9%ac%e8%a1%8c%e7%a9%ba%e5%bc%8f%e9%a1%b9%e7%9b%ae/">
                      诺基亚裁员之火烧至研发:精简天马行空式项目                    </a>
                  </li>
                  <li>
                    <a title="php连接函数implode与分割explode的深入解析" target="_blank" href="http://www.codeweblog.com/php%e8%bf%9e%e6%8e%a5%e5%87%bd%e6%95%b0implode%e4%b8%8e%e5%88%86%e5%89%b2explode%e7%9a%84%e6%b7%b1%e5%85%a5%e8%a7%a3%e6%9e%90/">
                      php连接函数implode与分割explode的深入解析                    </a>
                  </li>
                </ul>
              </div>
            </div>
          </div>

        </li>
        <li class="sb_list">
            
        </li>

        <li class="sb_list">
          <div class="right_con post_right_con">
            <div class="hotnews_list">
              <div class="hidden_line"></div>
              <div class="hn_title">猜你喜欢</div>
              <ul class="ulcl">
                
                                                <li class="hn_li bg">
                  <a title="问题跟踪系统 Request Tracker" target="_blank" href="http://www.codeweblog.com/%e9%97%ae%e9%a2%98%e8%b7%9f%e8%b8%aa%e7%b3%bb%e7%bb%9f-request-tracker/">• 问题跟踪系统 Request Tracker</a>
                </li>
                                <li class="hn_li bg">
                  <a title="一目了然 查看Windows 7具体版本号的最简单方法" target="_blank" href="http://www.codeweblog.com/%e4%b8%80%e7%9b%ae%e4%ba%86%e7%84%b6-%e6%9f%a5%e7%9c%8bwindows-7%e5%85%b7%e4%bd%93%e7%89%88%e6%9c%ac%e5%8f%b7%e7%9a%84%e6%9c%80%e7%ae%80%e5%8d%95%e6%96%b9%e6%b3%95/">• 一目了然 查看Windows 7具体版本号的最简单方法</a>
                </li>
                                <li class="hn_li bg">
                  <a title="安全 俄罗斯系统监视器应用手册" target="_blank" href="http://www.codeweblog.com/%e5%ae%89%e5%85%a8-%e4%bf%84%e7%bd%97%e6%96%af%e7%b3%bb%e7%bb%9f%e7%9b%91%e8%a7%86%e5%99%a8%e5%ba%94%e7%94%a8%e6%89%8b%e5%86%8c/">• 安全 俄罗斯系统监视器应用手册</a>
                </li>
                                <li class="hn_li bg">
                  <a title="通过任务分割提高嵌入式系统的实时性" target="_blank" href="http://www.codeweblog.com/%e9%80%9a%e8%bf%87%e4%bb%bb%e5%8a%a1%e5%88%86%e5%89%b2%e6%8f%90%e9%ab%98%e5%b5%8c%e5%85%a5%e5%bc%8f%e7%b3%bb%e7%bb%9f%e7%9a%84%e5%ae%9e%e6%97%b6%e6%80%a7/">• 通过任务分割提高嵌入式系统的实时性</a>
                </li>
                                <li class="hn_li bg">
                  <a title="ajax 防止用户反复提交的2种解决方案" target="_blank" href="http://www.codeweblog.com/ajax-%e9%98%b2%e6%ad%a2%e7%94%a8%e6%88%b7%e5%8f%8d%e5%a4%8d%e6%8f%90%e4%ba%a4%e7%9a%842%e7%a7%8d%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88/">• ajax 防止用户反复提交的2种解决方案</a>
                </li>
                                <li class="hn_li bg">
                  <a title="分析剑网3修为系统存在的种种问题及建议" target="_blank" href="http://www.codeweblog.com/%e5%88%86%e6%9e%90%e5%89%91%e7%bd%913%e4%bf%ae%e4%b8%ba%e7%b3%bb%e7%bb%9f%e5%ad%98%e5%9c%a8%e7%9a%84%e7%a7%8d%e7%a7%8d%e9%97%ae%e9%a2%98%e5%8f%8a%e5%bb%ba%e8%ae%ae/">• 分析剑网3修为系统存在的种种问题及建议</a>
                </li>
                                <li class="hn_li bg">
                  <a title="Python实现遍历windows所有窗口并输出窗口标题的方法" target="_blank" href="http://www.codeweblog.com/python%e5%ae%9e%e7%8e%b0%e9%81%8d%e5%8e%86windows%e6%89%80%e6%9c%89%e7%aa%97%e5%8f%a3%e5%b9%b6%e8%be%93%e5%87%ba%e7%aa%97%e5%8f%a3%e6%a0%87%e9%a2%98%e7%9a%84%e6%96%b9%e6%b3%95/">• Python实现遍历windows所有窗口并输出窗口标题的方法</a>
                </li>
                                <li class="hn_li bg">
                  <a title="七大最著名日食:中国古代日食视为对帝王警告" target="_blank" href="http://www.codeweblog.com/%e4%b8%83%e5%a4%a7%e6%9c%80%e8%91%97%e5%90%8d%e6%97%a5%e9%a3%9f-%e4%b8%ad%e5%9b%bd%e5%8f%a4%e4%bb%a3%e6%97%a5%e9%a3%9f%e8%a7%86%e4%b8%ba%e5%af%b9%e5%b8%9d%e7%8e%8b%e8%ad%a6%e5%91%8a/">• 七大最著名日食:中国古代日食视为对帝王警告</a>
                </li>
                                <li class="hn_li bg">
                  <a title="基于js disabled=&quot;false&quot;不起作用的解决办法" target="_blank" href="http://www.codeweblog.com/%e5%9f%ba%e4%ba%8ejs-disabled-false-%e4%b8%8d%e8%b5%b7%e4%bd%9c%e7%94%a8%e7%9a%84%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95/">• 基于js disabled="false"不起作用的解决办法</a>
                </li>
                                <li class="hn_li bg">
                  <a title="c#文件名/路径处理方法示例" target="_blank" href="http://www.codeweblog.com/c-%e6%96%87%e4%bb%b6%e5%90%8d-%e8%b7%af%e5%be%84%e5%a4%84%e7%90%86%e6%96%b9%e6%b3%95%e7%a4%ba%e4%be%8b/">• c#文件名/路径处理方法示例</a>
                </li>
                              </ul>
            </div>
          </div>
        </li>
        <li class="sb_list">
            
        </li>


      </ul>
      <ul id="crf1">
        <li class="sb_list">
                    <div class="bx">
          </div>
        </li>
      </ul>
    </div>


    <!-- sidebar End --> </div>
    
    <div id="hot_tag_list" class="clearfix">

  <section>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/iOS+%E5%BC%80%E5%8F%91/">iOS 开发</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/ios/">ios</a></li>
        <li><a href="http://www.codeweblog.com/stag/iphone/">iphone</a></li>
        <li><a href="http://www.codeweblog.com/stag/ipad/">ipad</a></li>
        <li><a href="http://www.codeweblog.com/stag/objective-c/">objective-c</a></li>
        <li><a href="http://www.codeweblog.com/stag/sqlite/">sqlite</a></li>
        <li><a href="http://www.codeweblog.com/stag/safari/">safari</a></li>
        <li><a href="http://www.codeweblog.com/stag/xcode/">xcode</a></li>
        <li><a href="http://www.codeweblog.com/stag/phonegap/">phonegap</a></li>
        <li><a href="http://www.codeweblog.com/stag/cocoa/">cocoa</a></li>
        <li><a href="http://www.codeweblog.com/stag/javascript/">javascript</a></li>
        <li><a href="http://www.codeweblog.com/stag/macosx/">macosx</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/Android+%E5%BC%80%E5%8F%91/">Android 开发</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/android/">android</a></li>
        <li><a href="http://www.codeweblog.com/stag/java/">java</a></li>
        <li><a href="http://www.codeweblog.com/stag/eclipse/">eclipse</a></li>
        <li><a href="http://www.codeweblog.com/stag/xml/">xml</a></li>
        <li><a href="http://www.codeweblog.com/stag/phonegap/">phonegap</a></li>
        <li><a href="http://www.codeweblog.com/stag/json/">json</a></li>
        <li><a href="http://www.codeweblog.com/stag/webview/">webview</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/Python+%E5%BC%80%E5%8F%91/">Python 开发</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/python/">python</a></li>
        <li><a href="http://www.codeweblog.com/stag/list/">list</a></li>
        <li><a href="http://www.codeweblog.com/stag/django/">django</a></li>
        <li><a href="http://www.codeweblog.com/stag/flask/">flask</a></li>
        <li><a href="http://www.codeweblog.com/stag/tornado/">tornado</a></li>
        <li><a href="http://www.codeweblog.com/stag/web.py/">web.py</a></li>
        <li><a href="http://www.codeweblog.com/stag/sqlalchemy/">sqlalchemy</a></li>
        <li><a href="http://www.codeweblog.com/stag/virtualenv/">virtualenv</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/JAVA+%E5%BC%80%E5%8F%91/">JAVA 开发</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/java/">java</a></li>
        <li><a href="http://www.codeweblog.com/stag/java-ee/">java-ee</a></li>
        <li><a href="http://www.codeweblog.com/stag/jar/">jar</a></li>
        <li><a href="http://www.codeweblog.com/stag/spring/">spring</a></li>
        <li><a href="http://www.codeweblog.com/stag/hibernate/">hibernate</a></li>
        <li><a href="http://www.codeweblog.com/stag/struts/">struts</a></li>
        <li><a href="http://www.codeweblog.com/stag/tomcat/">tomcat</a></li>
        <li><a href="http://www.codeweblog.com/stag/maven/">maven</a></li>
        <li><a href="http://www.codeweblog.com/stag/eclipse/">eclipse</a></li>
        <li><a href="http://www.codeweblog.com/stag/intellij-idea/">intellij-idea</a></li>
      </ul>
    </div>
  </section>
  <section>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/">开发语言</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/java/">java</a></li>
        <li><a href="http://www.codeweblog.com/stag/c/">c</a></li>
        <li><a href="http://www.codeweblog.com/stag/c%2B%2B/">c++</a></li>
        <li><a href="http://www.codeweblog.com/stag/php/">php</a></li>
        <li><a href="http://www.codeweblog.com/stag/perl/">perl</a></li>
        <li><a href="http://www.codeweblog.com/stag/python/">python</a></li>
        <li><a href="http://www.codeweblog.com/stag/javascript/">javascript</a></li>
        <li><a href="http://www.codeweblog.com/stag/c%23/">c#</a></li>
        <li><a href="http://www.codeweblog.com/stag/ruby/">ruby</a></li>
        <li><a href="http://www.codeweblog.com/stag/objective-c/">objective-c</a></li>
        <li><a href="http://www.codeweblog.com/stag/go/">go</a></li>
        <li><a href="http://www.codeweblog.com/stag/lua/">lua</a></li>
        <li><a href="http://www.codeweblog.com/stag/node.js/">node.js</a></li>
        <li><a href="http://www.codeweblog.com/stag/erlang/">erlang</a></li>
        <li><a href="http://www.codeweblog.com/stag/scala/">scala</a></li>
        <li><a href="http://www.codeweblog.com/stag/bash/">bash</a></li>
        <li><a href="http://www.codeweblog.com/stag/actionscript/">actionscript</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/PHP+%E5%BC%80%E5%8F%91/">PHP 开发</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/php/">php</a></li>
        <li><a href="http://www.codeweblog.com/stag/mysql/">mysql</a></li>
        <li><a href="http://www.codeweblog.com/stag/apache/">apache</a></li>
        <li><a href="http://www.codeweblog.com/stag/nginx/">nginx</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E6%95%B0%E7%BB%84/">数组</a></li>
        <li><a href="http://www.codeweblog.com/stag/mvc/">mvc</a></li>
        <li><a href="http://www.codeweblog.com/stag/codeigniter/">codeigniter</a></li>
        <li><a href="http://www.codeweblog.com/stag/symfony/">symfony</a></li>
        <li><a href="http://www.codeweblog.com/stag/zend-framework/">zend-framework</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/Ruby+%E5%BC%80%E5%8F%91/">Ruby 开发</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/ruby/">ruby</a></li>
        <li><a href="http://www.codeweblog.com/stag/ruby-on-rails/">ruby-on-rails</a></li>
        <li><a href="http://www.codeweblog.com/stag/rubygems/">rubygems</a></li>
        <li><a href="http://www.codeweblog.com/stag/rvm/">rvm</a></li>
        <li><a href="http://www.codeweblog.com/stag/macosx/">macosx</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/%E6%90%9C%E7%B4%A2/">搜索</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/">搜索引擎</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/">中文分词</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/">全文检索</a></li>
        <li><a href="http://www.codeweblog.com/stag/lucene/">lucene</a></li>
        <li><a href="http://www.codeweblog.com/stag/solr/">solr</a></li>
        <li><a href="http://www.codeweblog.com/stag/sphinx/">sphinx</a></li>
        <li><a href="http://www.codeweblog.com/stag/analyzer/">analyzer</a></li>
      </ul>
    </div>
  </section>
  <section>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/">前端开发</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/html/">html</a></li>
        <li><a href="http://www.codeweblog.com/stag/html5/">html5</a></li>
        <li><a href="http://www.codeweblog.com/stag/css/">css</a></li>
        <li><a href="http://www.codeweblog.com/stag/css3/">css3</a></li>
        <li><a href="http://www.codeweblog.com/stag/javascript/">javascript</a></li>
        <li><a href="http://www.codeweblog.com/stag/jquery/">jquery</a></li>
        <li><a href="http://www.codeweblog.com/stag/json/">json</a></li>
        <li><a href="http://www.codeweblog.com/stag/ajax/">ajax</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/%E6%95%B0%E6%8D%AE%E5%BA%93/">数据库</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/%E6%95%B0%E6%8D%AE%E5%BA%93/">数据库</a></li>
        <li><a href="http://www.codeweblog.com/stag/mysql/">mysql</a></li>
        <li><a href="http://www.codeweblog.com/stag/sqlite/">sqlite</a></li>
        <li><a href="http://www.codeweblog.com/stag/oracle/">oracle</a></li>
        <li><a href="http://www.codeweblog.com/stag/sql/">sql</a></li>
        <li><a href="http://www.codeweblog.com/stag/nosql/">nosql</a></li>
        <li><a href="http://www.codeweblog.com/stag/redis/">redis</a></li>
        <li><a href="http://www.codeweblog.com/stag/mongodb/">mongodb</a></li>
        <li><a href="http://www.codeweblog.com/stag/memcached/">memcached</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/">开发工具</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/vim/">vim</a></li>
        <li><a href="http://www.codeweblog.com/stag/emacs/">emacs</a></li>
        <li><a href="http://www.codeweblog.com/stag/ide/">ide</a></li>
        <li><a href="http://www.codeweblog.com/stag/eclipse/">eclipse</a></li>
        <li><a href="http://www.codeweblog.com/stag/xcode/">xcode</a></li>
        <li><a href="http://www.codeweblog.com/stag/intellij-idea/">intellij-idea</a></li>
        <li><a href="http://www.codeweblog.com/stag/textmate/">textmate</a></li>
        <li><a href="http://www.codeweblog.com/stag/sublime-text/">sublime-text</a></li>
        <li><a href="http://www.codeweblog.com/stag/visual-studio/">visual-studio</a></li>
        <li><a href="http://www.codeweblog.com/stag/git/">git</a></li>
        <li><a href="http://www.codeweblog.com/stag/github/">github</a></li>
        <li><a href="http://www.codeweblog.com/stag/svn/">svn</a></li>
        <li><a href="http://www.codeweblog.com/stag/hg/">hg</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0/">开放平台</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A/">新浪微博</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E4%BA%BA%E4%BA%BA%E7%BD%91/">人人网</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E5%BE%AE%E4%BF%A1/">微信</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E8%85%BE%E8%AE%AF%E5%BE%AE%E5%8D%9A/">腾讯微博</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E7%99%BE%E5%BA%A6/">百度</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E8%A1%97%E6%97%81/">街旁</a></li>
        <li><a href="http://www.codeweblog.com/stag/facebook/">facebook</a></li>
        <li><a href="http://www.codeweblog.com/stag/twitter/">twitter</a></li>
      </ul>
    </div>
  </section>
  <section>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/Javascript+%E5%BC%80%E5%8F%91/">Javascript 开发</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/javascript/">javascript</a></li>
        <li><a href="http://www.codeweblog.com/stag/jquery/">jquery</a></li>
        <li><a href="http://www.codeweblog.com/stag/yui/">yui</a></li>
        <li><a href="http://www.codeweblog.com/stag/mootools/">mootools</a></li>
        <li><a href="http://www.codeweblog.com/stag/node.js/">node.js</a></li>
        <li><a href="http://www.codeweblog.com/stag/chrome/">chrome</a></li>
        <li><a href="http://www.codeweblog.com/stag/firefox/">firefox</a></li>
        <li><a href="http://www.codeweblog.com/stag/firebug/">firebug</a></li>
        <li><a href="http://www.codeweblog.com/stag/internet-explorer/">internet-explorer</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/.NET+%E5%BC%80%E5%8F%91/">.NET 开发</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/.net/">.net</a></li>
        <li><a href="http://www.codeweblog.com/stag/c%23/">c#</a></li>
        <li><a href="http://www.codeweblog.com/stag/asp.net/">asp.net</a></li>
        <li><a href="http://www.codeweblog.com/stag/visual-studio/">visual-studio</a></li>
        <li><a href="http://www.codeweblog.com/stag/mvc/">mvc</a></li>
        <li><a href="http://www.codeweblog.com/stag/microsoft/">microsoft</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/%E4%BA%91%E8%AE%A1%E7%AE%97/">云计算</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/%E4%BA%91%E8%AE%A1%E7%AE%97/">云计算</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AD%98%E5%82%A8/">又拍云存储</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/">七牛云存储</a></li>
        <li><a href="http://www.codeweblog.com/stag/google-app-engine/">google-app-engine</a></li>
        <li><a href="http://www.codeweblog.com/stag/sina-app-engine/">sina-app-engine</a></li>
        <li><a href="http://www.codeweblog.com/stag/amazon-web-services/">amazon-web-services</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E7%99%BE%E5%BA%A6%E4%BA%91/">百度云</a></li>
      </ul>
    </div>
    <div>
      <h3><a href="http://www.codeweblog.com/stag/%E6%9C%8D%E5%8A%A1%E5%99%A8/">服务器</a></h3>
      <ul>
        <li><a href="http://www.codeweblog.com/stag/linux/">linux</a></li>
        <li><a href="http://www.codeweblog.com/stag/unix/">unix</a></li>
        <li><a href="http://www.codeweblog.com/stag/ubuntu/">ubuntu</a></li>
        <li><a href="http://www.codeweblog.com/stag/windows-server/">windows-server</a></li>
        <li><a href="http://www.codeweblog.com/stag/centos/">centos</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/">负载均衡</a></li>
        <li><a href="http://www.codeweblog.com/stag/%E7%BC%93%E5%AD%98/">缓存</a></li>
        <li><a href="http://www.codeweblog.com/stag/apache/">apache</a></li>
        <li><a href="http://www.codeweblog.com/stag/nginx/">nginx</a></li>
      </ul>
    </div>
  </section>
</div>

  <!-- wrapper End --> </div>
<!-- con End -->

<div id="ft"> <!-- 页脚 -->
  <div class="if">
    
    <div class="bx1">
      <a href="http://www.codeweblog.com/about/about/" target="_blank"><strong>关于我们</strong></a><span class="v">|</span>
      <a href="http://www.codeweblog.com/about/contact/" target="_blank"><strong>联系我们</strong></a><span class="v">|</span>
      <a href="http://www.codeweblog.com/about/wap/" target="_blank"><strong>WAP版</strong></a><span class="v">|</span>
      <a href="http://www.codeweblog.com/sitemap/" target="_blank"><strong>网站地图</strong></a><span class="v">|</span> 
      <a href="http://www.codeweblog.com/archiver/" target="_blank"><strong>Archiver</strong></a>
    </div>
    
<script type="text/javascript" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/count.js"></script>
<script type="text/javascript" src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/stat.php"></script><script src="./shiro源码分析(五)CredentialsMatcher - CodeWeblog.com_files/core.php" charset="utf-8" type="text/javascript"></script><a href="http://www.cnzz.com/stat/website.php?web_id=1258369041" target="_blank" title="站长统计">站长统计</a>

    <div class="bx2">
      <p>Copyright (C) <a href="http://www.codeweblog.com/" target="_blank">codeweblog.com</a>, All Rights Reserved.</p>
      <p><a href="http://www.codeweblog.com/" target="_blank">CodeWeblog.com</a> 版权所有 闽ICP备15018612号</p>
      <p>processed in 0.042 (s). 13 q(s)</p>
    </div>
  </div>
</div>



    
</body></html>